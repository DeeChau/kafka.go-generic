// Code generated by github.com/wishabi/kafka.go. DO NOT EDIT.
package producers

import (
	"context"
	"fmt"

	"github.com/segmentio/kafka-go"
	"github.com/wishabi/kafka.go/avro"

	schema "github.com/DeeChau/kafka.go-generic/internal/schema"
)

// AvroFsaProducer kafka producer for the Schema Type Fsa
type AvroFsaProducer struct {
	writer   *kafka.Writer
	registry *avro.Registry
	topic    string
}

// Produce publish a message using value
func (p *AvroFsaProducer) Produce(ctx context.Context, value *schema.Fsa) error {
	valueSchemaID, err := p.registry.SchemaID(p.topic+"-value", value.Schema())
	if err != nil {
		return err
	}

	valueBuffer := avro.Build(valueSchemaID)
	err = value.Serialize(valueBuffer)
	if err != nil {
		return fmt.Errorf("failed to write Fsa to buffer: %w", err)
	}

	err = p.writer.WriteMessages(ctx, kafka.Message{
		Value: valueBuffer.Bytes(),
	})

	if err != nil {
		return fmt.Errorf("failed to publish Fsa to kafka: %w", err)
	}

	return nil
}

// NewAvroFsaProducer creates a producer for sending the Schema Type Fsa message
func NewAvroFsaProducer(config kafka.WriterConfig, registry *avro.Registry) *AvroFsaProducer {
	return &AvroFsaProducer{
		writer:   kafka.NewWriter(config),
		registry: registry,
		topic:    config.Topic,
	}
}
