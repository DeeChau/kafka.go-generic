// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
package schema

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type StateKey struct {
	// A two character identifier for the states name. This field is used as the key.
	Abbreviation string `json:"abbreviation"`
}

const StateKeyAvroCRC64Fingerprint = "1\xa6\x02H\x880\xdf~"

func NewStateKey() *StateKey {
	return &StateKey{}
}

func DeserializeStateKey(r io.Reader) (*StateKey, error) {
	t := NewStateKey()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeStateKeyFromSchema(r io.Reader, schema string) (*StateKey, error) {
	t := NewStateKey()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeStateKey(r *StateKey, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Abbreviation, w)
	if err != nil {
		return err
	}
	return err
}

func (r *StateKey) Serialize(w io.Writer) error {
	return writeStateKey(r, w)
}

func (r *StateKey) Schema() string {
	return "{\"fields\":[{\"doc\":\"A two character identifier for the states name. This field is used as the key.\",\"name\":\"abbreviation\",\"type\":\"string\"}],\"name\":\"com.flipp.fadmin.StateKey\",\"type\":\"record\"}"
}

func (r *StateKey) SchemaName() string {
	return "com.flipp.fadmin.StateKey"
}

func (_ *StateKey) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *StateKey) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *StateKey) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *StateKey) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *StateKey) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *StateKey) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *StateKey) SetString(v string)   { panic("Unsupported operation") }
func (_ *StateKey) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StateKey) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Abbreviation}
	}
	panic("Unknown field index")
}

func (r *StateKey) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *StateKey) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *StateKey) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *StateKey) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *StateKey) Finalize()                        {}

func (_ *StateKey) AvroCRC64Fingerprint() []byte {
	return []byte(StateKeyAvroCRC64Fingerprint)
}
