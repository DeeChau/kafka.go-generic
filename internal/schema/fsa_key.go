// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
package schema

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type FsaKey struct {
	// This field is used as the key.
	Label string `json:"label"`
}

const FsaKeyAvroCRC64Fingerprint = "\xfa\xc1+\xe4\xc2z2+"

func NewFsaKey() *FsaKey {
	return &FsaKey{}
}

func DeserializeFsaKey(r io.Reader) (*FsaKey, error) {
	t := NewFsaKey()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeFsaKeyFromSchema(r io.Reader, schema string) (*FsaKey, error) {
	t := NewFsaKey()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeFsaKey(r *FsaKey, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Label, w)
	if err != nil {
		return err
	}
	return err
}

func (r *FsaKey) Serialize(w io.Writer) error {
	return writeFsaKey(r, w)
}

func (r *FsaKey) Schema() string {
	return "{\"fields\":[{\"doc\":\"This field is used as the key.\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"com.flipp.fadmin.FsaKey\",\"type\":\"record\"}"
}

func (r *FsaKey) SchemaName() string {
	return "com.flipp.fadmin.FsaKey"
}

func (_ *FsaKey) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *FsaKey) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *FsaKey) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *FsaKey) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *FsaKey) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *FsaKey) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *FsaKey) SetString(v string)   { panic("Unsupported operation") }
func (_ *FsaKey) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FsaKey) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Label}
	}
	panic("Unknown field index")
}

func (r *FsaKey) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FsaKey) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *FsaKey) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *FsaKey) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *FsaKey) Finalize()                        {}

func (_ *FsaKey) AvroCRC64Fingerprint() []byte {
	return []byte(FsaKeyAvroCRC64Fingerprint)
}
