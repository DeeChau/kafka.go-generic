// Modified from code generated by github.com/wishabi/kafka.go.
package generic_schema

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/DeeChau/kafka.go-generic/internal/schema"
)

// Useful helper to serialize a Schema Object to Bytes
func serializeSchemaObjToBytes[T any, KT AvroSchemaStruct[T]](schemaObj *T) ([]uint8, error) {
	objBuffer := bytes.NewBuffer([]byte{})
	err := KT(schemaObj).Serialize(objBuffer)
	if err != nil {
		return nil, fmt.Errorf("failed to write %T, %v to buffer: %w", schemaObj, schemaObj, err)
	}
	return objBuffer.Bytes(), nil
}

// Example test for this function - Relies on topics to be created and local kafka to be running (Technicall Integration test)
func TestNewSchemaStruct(t *testing.T) {
	fsa := NewSchemaStruct[schema.Fsa]()
	expectedFsa := schema.Fsa{}
	if expectedFsa != *fsa {
		t.Fatalf(`NewSchemaStruct[schema.Fsa]() = %v, want match for %v`, fsa, expectedFsa)
	}

	state := NewSchemaStruct[schema.State]()
	expected_state := schema.State{}
	if expected_state != *state {
		t.Fatalf(`NewSchemaStruct[schema.State]() = %v, want match for %v`, fsa, expected_state)
	}
}

func TestDeserialzeFsas(t *testing.T) {
	var err error
	expectedFsa := schema.Fsa{
		Label:      "M5V",
		Latitude:   123.45,
		Longitude:  123.45,
		Message_id: "TEST-FSA",
		Created_at: int64(500_000),
		Updated_at: int64(500_000),
		Timestamp:  "2022-02-08 16:00:00 -0500",
	}
	valueData, err := serializeSchemaObjToBytes(&expectedFsa)
	mockReader := bytes.NewReader(valueData)
	avroSchema := expectedFsa.Schema()

	if err != nil {
		t.Fatalf(`serializeSchemaObjToBytes("Fsa-value", %v) = %v, %v`, expectedFsa, valueData, err)
	}

	new_fsa, err := DeserializeFromSchema[schema.Fsa](mockReader, avroSchema)

	if expectedFsa != *new_fsa || err != nil {
		t.Fatalf(`DeserializeFromSchema[schema.Fsa]() = %v, %v, want match for %v`, *new_fsa, err, expectedFsa)
	}

}
