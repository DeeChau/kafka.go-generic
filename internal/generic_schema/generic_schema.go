// Modified from code generated by github.com/wishabi/kafka.go.
package generic_schema

import (
	"io"
	"log"

	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type AvroSchemaStruct[S any] interface {
	Serialize(w io.Writer) error
	Schema() string
	SchemaName() string
	Get(i int) types.Field
	SetBoolean(v bool)
	SetInt(v int32)
	SetLong(v int64)
	SetFloat(v float32)
	SetDouble(v float64)
	SetBytes(v []byte)
	SetString(v string)
	SetUnionElem(v int64)
	AppendMap(key string) types.Field
	AppendArray() types.Field
	Finalize()
	AvroCRC64Fingerprint() []byte
	SetDefault(i int)
	NullField(i int)
	*S
}

// Schema Serde
func DeserializeFromSchema[S any, PT AvroSchemaStruct[S]](r io.Reader, avroSchema string) (PT, error) {
	t := NewSchemaStruct[S, PT]()
	deser, err := compiler.CompileSchemaBytes([]byte(avroSchema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}
	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	log.Printf("Consumer deserialized %T message: %s", t, t)
	return t, err
}

func NewSchemaStruct[S any, PT AvroSchemaStruct[S]]() PT {
	return PT(new(S))
}
